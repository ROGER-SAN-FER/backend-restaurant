# activar cierto perfil
#spring:
#  profiles:
#    active: dev

# configuración general
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
  paths-to-match: "/**"

logging:
  level:
    org.springframework.cache: TRACE
    org.springframework.cache.interceptor.CacheInterceptor: TRACE
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG         # (opcional: para ver SQL)
    org.hibernate.orm.jdbc.bind: TRACE # (opcional: para ver parámetros)

server:
  port: ${PORT:8080}
  error:
    include-message: always
    include-binding-errors: always

spring:
  cache:
    type: caffeine
    cache-names:
      - platillos:list
      - tipos:list
      - platillos
      - tipos
    caffeine:
      spec: maximumSize=10000,expireAfterWrite=10m,recordStats

#spring:
#  cache:
#    type: caffeine
#    caffeine:
#      spec: maximumSize=10000,expireAfterWrite=10m

# Info de app
info:
  app:
    nombre: "backend-restaurant"
    version: "1.0.1"
    autor: "Roger Roy Sánchez Fernández"
    email: "roger190892@gmail.com"
    descripcion: "API de gestión de platillos para restaurantes"
    entorno: "producción"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  info:
    env:
      enabled: true  # <- permite exponer variables desde 'info'
---
# perfil de desarrollo
spring:
  config:
    activate:
      on-profile: dev

  application:
    name: backend-restaurant-dev

  datasource:
    url: ${DB_URL_DEV}
    username: ${DB_USER_DEV}
    password: ${DB_PASSWORD_DEV}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          time_zone: UTC
        hbm2ddl:
          schema-generation:
            script:
              action: validate

#Activar devtools
  devtools:
    restart:
      enabled: true
    livereload:
      enabled: true

#Conexión Supabase para fotos
supabase:
  url: ${STORAGE_URL}
  service-key: ${SUPABASE_SERVICE_ROLE}
  bucket: ${STORAGE_BUCKET}

#Para limitar los tamaños de archivos
  servlet:
    multipart:
      max-file-size: 2MB       # Tamaño máximo por archivo (puedes poner 1MB, 5MB, etc.)
      max-request-size: 7MB
---
# perfil para test
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
    driver-class-name: org.h2.Driver
    username: sa
    password: password

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: false

  h2:
    console:
      enabled: true
      path: /h2-console

app:
  nombre: "backent-restaurant para testing"
  version: "1.0-test"
  debug: false

# valores ficticios para supabase (no se conectará, pero evita error de properties faltantes)
supabase:
  url: http://dummy-supabase-url
  service-key: dummy-key
  bucket: dummy-bucket
---
# perfil de producción
spring:
  config:
    activate:
      on-profile: prod

  application:
    name: backend-restaurant

  datasource:
    url: ${DB_URL}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver

    #HikariCP pool de conexiones
    hikari:
      maximum-pool-size: 3 #Conexiones activas(prod 10-30)
      minimum-idle: 1 #1 conexion abierta en estado inactivo(prod 2-3)
      idle-timeout: 10000 #Inactividad de 10 segundos para cerrar(prod 60000 1 min)
      connection-timeout: 10000 #Espera de 10 segundos para obtener una conexion del pool(prod 30-60 seg)
      max-lifetime: 30000 #Tiempo de renovacion de conexion cada 10-30 segundos(prod 30 min 1800000)
      pool-name: HikariPool-1

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          time_zone: UTC
        hbm2ddl:
          schema-generation:
            script:
              action: validate

springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
  paths-to-match: "/**"

logging:
  level:
    org:
      springframework:
        web: DEBUG
        security: DEBUG
      hibernate: ERROR

server:
  port: ${PORT:8080}
  error:
    include-message: always
    include-binding-errors: always

#Conexión Supabase para fotos
supabase:
  url: ${STORAGE_URL}
  service-key: ${SUPABASE_SERVICE_ROLE}
  bucket: ${STORAGE_BUCKET}

  #Para limitar los tamaños de archivos
  servlet:
    multipart:
      max-file-size: 2MB       # Tamaño máximo por archivo (puedes poner 1MB, 5MB, etc.)
      max-request-size: 7MB